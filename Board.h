/*	棋盤上棋子的位置
	正(白):false 負(黑):true
	0:無棋子
	1 2:城堡 前後左右不限步數
	3 4:騎士 L(無視九宮格內是否有棋子)
	5 6:主教 斜45度不限步數
	7:皇后 車+象
	8:國王 九宮格
	9~16:士兵 第一步可前進1或2格 之後一次前進一格 只能斜吃	*/
#pragma once
#include<iostream>
using namespace std;

class Board {
public:
	static int position[8][8];
	const int startPos[8][8] = {//重新開始時棋子的位置
	   -1,  -3,  -5,  -7,  -8,  -6,  -4,  -2,
	   -9, -10, -11, -12, -13, -14, -15, -16,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		9,  10,  11,  12,  13,  14,  15,  16,
		1,   3,   5,   7,   8,   6,   4,   2,
	};
	void print();
};

int Board::position[8][8] = {
	   -1,  -3,  -5,  -7,  -8,  -6,  -4,  -2,
	   -9, -10, -11, -12, -13, -14, -15, -16,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		0,   0,   0,   0,   0,   0,   0,   0,
		9,  10,  11,  12,  13,  14,  15,  16,
		1,   3,   5,   7,   8,   6,   4,   2,
};

void Board::print() {
	cout << "current board:\n";
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			cout << position[i][j] << '\t';
		}
		cout << endl;
	}
}